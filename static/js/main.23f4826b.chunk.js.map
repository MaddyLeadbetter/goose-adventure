{"version":3,"sources":["Scene.js","Choices.js","Story.js","state/actions.js","App.js","state/reducers.js","state/index.js","serviceWorker.js","index.js"],"names":["backgroundImages","test","tags","className","style","backgroundImage","background","Choices","choices","makeChoice","map","choice","key","index","onClick","text","Story","sceneText","idx","ink","storyContent","getGlobalVars","variablesState","Object","keys","_globalVariables","reduce","acc","gameLoop","currentTags","canContinue","push","Continue","concat","currentChoices","length","GameOverError","globals","tag","split","reason","rest","instance","Error","setPrototypeOf","getPrototypeOf","this","captureStackTrace","prototype","create","constructor","value","enumerable","writable","configurable","__proto__","connect","state","ending","dispatch","choiceIdx","ChooseChoiceIndex","gameData","type","e","props","Scene","INITIAL_STATE","createStore","action","devToolsEnhancer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23f4826b.chunk.js","sourcesContent":["import React from 'react';\n\n// TODO: background image urls can go here\nconst backgroundImages = {\n\ttest: \"https://blogs.thomsonreuters.com/answerson/wp-content/uploads/sites/3/2016/10/University-of-Waterloo-800x450.jpg\"\n}\n\nconst defaultImage = \"\";\n\nexport default ({ tags }) => {\n\treturn (\n\t\t<section\n\t\t\tclassName=\"scene\"\n\t\t\tstyle={{\n\t\t\t\tbackgroundImage: `url(${\n\t\t\t\t\ttags && backgroundImages[tags.background]\n\t\t\t\t\t? backgroundImages[tags.background]\n\t\t\t\t\t: defaultImage\n\t\t\t\t})`\n\t\t\t}}\n\t\t/>\n\t);\n};","import React from 'react';\n\nconst Choices = ({ choices, makeChoice }) => (\n\t<section className=\"choices\">\n\t\t<h3>Make a decision...</h3>\n\t\t<ul>\n\t\t\t{choices.map(choice => (\n\t\t\t\t<li key={choice.index} onClick={() => makeChoice(choice.index)}>\n\t\t\t\t\t{choice.text}\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t</section>\n);\nexport default Choices;","import React from 'react';\n\nconst Story = ({ sceneText }) => (\n\t<section className=\"story-text\">\n\t\t{sceneText.map((text, idx) => <p key={idx}>{text}</p>)}\n\t</section>\n);\n\nexport default Story;","import { Story } from 'inkjs/dist/ink';\nimport storyContent from '../test_goose/test_goose_text.json';\n\nexport const ink = new Story(storyContent);\nexport const MAKE_CHOICE = \"MAKE_CHOICE\";\n\nexport const getGlobalVars = variablesState =>\n  Object.keys(variablesState._globalVariables).reduce(\n\t(acc, key) => ({\n\t\t...acc,\n\t\t[key]: variablesState[key]\n\t}),\n\t{}\n\t);\n\nexport const getTags = tags =>\n\ttags.reduce(\n\t\t(acc, tag) => ({ ...acc, \n    \t[tag.split(\": \")[0]]: tag.split(\": \")[1] }),\n\t\t{}\n\t);\n\nexport const gameLoop = () => {\n\tconst sceneText = [];\n\tlet currentTags = [];\n\twhile (ink.canContinue) {\n\t\tsceneText.push(ink.Continue());\n\t\tcurrentTags = currentTags.concat(ink.currentTags);\n\t}\n\tconst { currentChoices, variablesState } = ink;\n\tif (!ink.canContinue && !currentChoices.length)\n\t\tthrow new GameOverError(\"no more choices\");\n\treturn {\n\t\tglobals: getGlobalVars(variablesState),\n\t\ttags: getTags(currentTags),\n\t\tcurrentChoices,\n\t\tsceneText,\n\t\tcurrentTags\n\t};\n};\n\nexport const makeChoice = choiceIdx => {\n\tink.ChooseChoiceIndex(choiceIdx);\n\ttry {\n\t\tconst gameData = gameLoop();\n\t\treturn {\n\t\t\ttype: MAKE_CHOICE,\n\t\t\t...gameData\n\t\t};\n\t} catch (e) {\n\t\tif (e instanceof GameOverError && e.reason === \"no more choices\") {\n\t\t\treturn {\n\t\t\t\ttype: MAKE_CHOICE,\n\t\t\t\tending: true\n\t\t\t};\n\t\t}\n\t\tthrow e;\n\t}\n};\n\nfunction GameOverError(reason = \"\", ...rest) {\n\tvar instance = new Error(`Game Over, ${reason}`, ...rest);\n\tinstance.reason = reason;\n\tObject.setPrototypeOf(instance, Object.getPrototypeOf(this));\n\tif (Error.captureStackTrace) {\n\t\tError.captureStackTrace(instance, GameOverError);\n\t}\n\treturn instance;\n}\nGameOverError.prototype = Object.create(Error.prototype, {\n\tconstructor: {\n\t \tvalue: Error,\n\t \tenumerable: false,\n\t \twritable: true,\n\t \tconfigurable: true\n\t}\n});\nif (Object.setPrototypeOf) {\n\tObject.setPrototypeOf(GameOverError, Error);\n} else {\n\tGameOverError.__proto__ = Error;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport Scene from './Scene';\nimport Choices from './Choices';\nimport Story from './Story';\nimport { makeChoice } from './state/actions';\nimport './App.css';\n\nconst stateToProps = state => ({\n  tags: state.tags,\n  currentChoices: state.currentChoices,\n  sceneText: state.sceneText,\n  ending: state.ending\n});\n\nconst dispatchToProps = dispatch => ({\n  makeChoice: idx => dispatch(makeChoice(idx))\n});\n\nconst  App = (props) => {\n  if (props.ending) {\n    return (\n      <div className=\"ending\">The End!</div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <Scene tags={props.tags} />\n        <Story sceneText={props.sceneText} />\n        <Choices choices={props.currentChoices} makeChoice={props.makeChoice} />\n      </div>\n    );\n  }\n}\n\nexport default connect(stateToProps, dispatchToProps)(App);\n","import { gameLoop, MAKE_CHOICE } from \"./actions\";\nexport const INITIAL_STATE = {\n  ending: false,\n  ...gameLoop()\n};\nexport default (state = INITIAL_STATE, { type, ...action }) => {\n  switch (type) {\n    case MAKE_CHOICE:\n      return {\n        ...state,\n        ...action\n      };\ndefault:\n      return state;\n  }\n};","import { createStore } from \"redux\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport inkGame, { INITIAL_STATE } from \"./reducers\";\nexport default createStore(inkGame, INITIAL_STATE, devToolsEnhancer());","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport store from \"./state\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}